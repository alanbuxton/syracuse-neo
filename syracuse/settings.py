"""
Django settings for syracuse project.

Generated by 'django-admin startproject' using Django 4.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
import neomodel

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY",'django-insecure-=vq-#5ghwtp7_()k7xi$goljno#*4^)-yaim=q*ql%7nl^r*5#')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DJANGO_DEBUG",'True').lower() == 'true'
MOTD = os.environ.get("SYRACUSE_MOTD","")

ALLOWED_HOSTS = os.environ.get("DJANGO_ALLOWED_HOSTS","localhost,127.0.0.1").split(",")


# Application definition

INSTALLED_APPS = [
    'django_neomodel',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.discord',
    'allauth.socialaccount.providers.facebook',
    'allauth.socialaccount.providers.github',
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.instagram',
    'allauth.socialaccount.providers.linkedin',
    'allauth.socialaccount.providers.snapchat',
    'topics.apps.TopicsConfig',
    'feedbacks.apps.FeedbacksConfig',
    'trackeditems.apps.TrackeditemsConfig',
    'integration.apps.IntegrationConfig',
    'api.apps.ApiConfig',
    'auth_extensions.apps.AuthExtensionsConfig',
    'rest_framework',
    'drf_spectacular',
    'django_bootstrap5',
    'rest_framework.authtoken',
    'corsheaders',
    'magic_link',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "allauth.account.middleware.AccountMiddleware",
    'api.middleware.api_usage.APIUsageMiddleware',
]

ROOT_URLCONF = 'syracuse.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR,"templates"), ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.request',
                'syracuse.context_processors.set_constants',
                'auth_extensions.context_processors.anon_aware_authentication',
            ],
        },
    },
]

AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',
    # `allauth` specific authentication methods, such as login by email
    'allauth.account.auth_backends.AuthenticationBackend',
]

WSGI_APPLICATION = 'syracuse.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': "django.db.backends.postgresql",
        "HOST": os.environ.get("POSTGRES_HOST","localhost"),
        "NAME": os.environ.get("POSTGRES_NAME","syracuse_pg_db"),
        "USER": os.environ.get("POSTGRES_USER","syracuse_user"),
        "PASSWORD": os.environ.get("POSTGRES_PASSWORD","itsasecret"),
        "PORT": os.environ.get("POSTGRES_PORT",5432),
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

USE_THOUSAND_SEPARATOR = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'templates'),]
# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'level': os.environ.get("DJANGO_LOG_LEVEL","INFO"),
            'formatter': 'default',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': os.environ.get("DJANGO_LOG_LEVEL","INFO"),
    },
    'formatters': {
        'default': {
            'format': '%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        }
    }
}

# Email

# Email backend
EMAIL_BACKEND = 'syracuse.email_backend.BrevoEmailBackend'

# Brevo SMTP configuration
EMAIL_HOST = os.environ["EMAIL_HOST"]
EMAIL_PORT = int(os.environ.get("EMAIL_PORT","587"))
EMAIL_USE_TLS = True
EMAIL_HOST_USER = os.environ["EMAIL_HOST_USER"]
EMAIL_HOST_PASSWORD = os.environ["EMAIL_HOST_PASSWORD"]
DEFAULT_FROM_EMAIL = os.environ["DEFAULT_FROM_EMAIL"]

# Neomodel

NEOMODEL_NEO4J_SCHEME = os.environ.get('NEO4J_SCHEME','bolt')
NEOMODEL_NEO4J_USERNAME = os.environ.get('NEO4J_USERNAME','neo4j')
NEOMODEL_NEO4J_PASSWORD = os.environ.get('NEO4J_PASSWORD','itsasecret')
NEOMODEL_NEO4J_HOSTNAME = os.environ.get('NEO4J_HOSTNAME','localhost')
NEOMODEL_NEO4J_PORT = os.environ.get('NEO4J_PORT',7687)
NEOMODEL_NEO4J_BOLT_URL = f'{NEOMODEL_NEO4J_SCHEME}://{NEOMODEL_NEO4J_USERNAME}:{NEOMODEL_NEO4J_PASSWORD}@{NEOMODEL_NEO4J_HOSTNAME}:{NEOMODEL_NEO4J_PORT}'

if neomodel.db.url is None:
    neomodel.db.set_connection(NEOMODEL_NEO4J_BOLT_URL)

# all-auth
SITE_ID = 1
LOGIN_REDIRECT_URL = "/"
ACCOUNT_LOGOUT_ON_GET = True

BREVO_API_KEY = os.environ['BREVO_API_KEY']
TRACKED_ORG_ACTIVITIES_DAYS = int(os.environ.get('TRACKED_ORG_ACTIVITIES_DAYS',"7"))

THROTTLES = {
    'unverified_user': 10,
    'verified_user': 100,
}

REST_FRAMEWORK = {
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.NamespaceVersioning',
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
    'DEFAULT_VERSION': 'v1',  
    'DEFAULT_THROTTLE_CLASSES': ['api.throttling.ScopedTieredThrottle'],
    'DEFAULT_THROTTLE_RATES': {'default_scope': '1/month' },
}

CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.redis.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379",
        "TIMEOUT": None, 
    }
}

ACCOUNT_FORMS = {'login': 'auth_extensions.allauth.AnonAwareLoginForm'}

# TTL integration
RDF_SLEEP_TIME=int(os.environ.get("RDF_SLEEP_TIME","0"))
RDF_DUMP_DIR=os.environ.get("RDF_DUMP_DIR","tmp/dump")
RDF_ARCHIVE_DIR=os.environ.get("RDF_ARCHIVE_DIR","tmp/archive")

USE_GOOGLE_ANALYTICS=os.environ.get("USE_GOOGLE_ANALYTICS","False").lower() == 'true'

EMBEDDINGS_MODEL=os.environ.get("EMBEDDINGS_MODEL")
CREATE_NEW_EMBEDDINGS=os.environ.get("CREATE_NEW_EMBEDDINGS","False").lower() == 'true' # If false then won't create embeddings for new nodes
GEO_LOCATION_MIN_WEIGHT_PROPORTION=float(os.environ.get("GEO_LOCATION_MIN_WEIGHT_PROPORTION","0.2"))
INDUSTRY_CLUSTER_MIN_WEIGHT_PROPORTION=float(os.environ.get("INDUSTRY_CLUSTER_MIN_WEIGHT_PROPORTION","0.2"))

SPECTACULAR_SETTINGS = {
    'TITLE': 'Syracuse Company News',
    'DESCRIPTION': ('\n> *Company data emerges from the primordial data goo*\n\n'
                    'Nicely-structured news for companies (organizations) worldwide. '
                    "It's tuned specifically for company data and so:\n\n - offers a solution "
                    'to the <a href="https://alanbuxton.wordpress.com/2023/01/02/revisiting-entity-extraction/">The Bloomberg Problem</a>\n'
                    " - doesn't suffer from the same sorts of hallucinations as pure GenAI tools.\n\n"
                    'Log in for free to have a look around at <a href="https://syracuse.1145.am">syracuse.1145.am</a>\n\n'
                    'Quick start: Get an api key by POSTing to `/api/v1/register-and-get-key`'
                    'Then check out e.g. a GET to `/api/v1/activities/?org_name=apple`\n\n'
                    "Nerds may be interested in Syracuse's novel graph architecture. Instead of a company having a canonical record that keeps getting updated, company records are built from the ground up by combining related nodes. "
                    "This has the benefit of being more flexible (e.g. in case of backing out wrong data) while still being consistent enough to be reliably usable."
    ),
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': True,
    'SCHEMA_PATH_PREFIX_TRIMMING': True,
    'PREPROCESSING_HOOKS': [
        'syracuse.schema_hooks.filter_paths',
    ],
}

CORS_ALLOW_ALL_ORIGINS = True 
